#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct List {
	char name[10];
	int start;
	int nob;
	struct List *next;
}List;

void showbitvector(int block[], int n) {
	printf("\nBit Vector: \n");
	for(int i = 0; i < n; i++)
    	printf("%d", block[i]);
	printf("\n");
}

void createnewfile(int bitv[], int n, List *directory) {
	char name[10];
	int nob;

	printf("Enter name of file: ");
	scanf(" %s" , &name);

	printf("Enter number of blocks: ");
	scanf(" %d" , &nob);

	int start;
	int found = 0;
	// find empty blocks.
	for(int i = 0; i < n; i++) {
    	if(bitv[i] == 1) {
        	int temp = nob;
        	start = i;
        	temp--;
        	if(temp == 0) {
                	found = 1;
                	break;
        	}
        	for(int j = i+1;j < n; j++) {
            	if(bitv[j] == 1) temp--;
            	else {
                	break;
            	}
            	if(temp == 0) {
                	found = 1;
                	break;
            	}
        	}
    	}
    	if(found == 1) break;
	}
	if(found == 0) {
    	printf("Memory full!!\n\n");
    	return;
	}
	int temps = start;
	for(int i = 0; i < nob; i++) {
    	bitv[temps] = 0;
    	temps++;
	}
	List *temp = directory;
	if(temp->nob == -1) {
    	strcpy(temp->name , name);
    	temp->start = start;
    	temp->nob = nob;
    	temp->next = NULL;
	} else {
    	List *nn = (List*)malloc(sizeof(List));
    	strcpy(nn->name , name);
    	nn->start = start;
    	nn->nob = nob;
    	nn->next = NULL;
    	while(temp->next != NULL) {
        	temp = temp->next;
    	}
    	temp->next = nn;
	}
	printf("File Created\n\n");
}   

void showdirectory(List *directory) {
	if(directory->nob == -1) {
    	printf("Directory Empty\n\n");
    	return;
	}
	printf("\n");
	List *temp = directory;
	while(temp != NULL) {
    	printf("File Name: %s\nStart Block: %d\nNumber of Blocks: %d\n\n", temp->name, temp->start, temp->nob);
    	temp = temp->next;
	}
}

List* deletefile(int bitv[], int n, List *directory) {
	char name[10];

	printf("Enter file name: ");
	scanf(" %s" , &name);

	int start;
	int nob;
	List *temp = directory;
	int found = 0;

	if(temp->next == NULL) {
    	if(strcmp(name , temp->name) == 0) {
        	start = temp->start;
        	nob = temp->nob;
        	int temps = start;
        	for(int i = 0; i < nob; i++) {
            	bitv[temps] = 1;
            	temps++;
        	}
        	temp->nob = -1;
        	printf("File Deleted 1\n\n");
    	}
    	return directory;
	} else if(strcmp(name , temp->name) == 0) {
    	start = directory->start;
    	nob = directory->nob;
    	found = 1;
    	directory = directory->next;
    	printf("File Deleted\n\n");
    	int temps = start;
    	for(int i = 0; i < nob; i++) {
        	bitv[temps] = 1;
        	temps++;
    	}
    	return directory;
	}

	List *pre = temp;
	while(temp != NULL) {
    	if(strcmp(name , temp->name) == 0) {
        	start = temp->start;
        	nob = temp->nob;
        	found = 1;
        	pre->next = temp->next;
        	printf("File Deleted\n\n");
        	int temps = start;
        	for(int i = 0; i < nob; i++) {
            	bitv[temps] = 1;
            	temps++;
        	}
        	return directory;
    	}
    	pre = temp;
    	temp = temp->next;
	}

	printf("File not found\n");
	return directory;
}

int main() {
	int n = 10;
	printf("Enter number of blocks: ");
	scanf(" %d" , &n);
	int block[n];
	for(int i = 0; i < n; i++) {
    	block[i] = 1;
	}
	List *directory = (List*)malloc(sizeof(List));
	directory->nob = -1;
	int r = 1;
	while(r != 0) {
    	printf("\n1. Show Bit Vector\n2. Create New File\n3. Show Directory\n4. Delete File\n5. Exit \n\n");
    	int c;
    	printf("-> ");
    	scanf(" %d", &c);
    	switch(c)
    	{
    	case 1:
        	showbitvector(block , n);
        	break;
    	case 2:
        	createnewfile(block , n, directory);
        	break;
    	case 3:
        	showdirectory(directory);
        	break;
    	case 4:
        	directory = deletefile(block , n , directory);
        	break;
    	case 5:
        	r = 0;
        	break;
    	default:
        	break;
    	}
	}
}






















Q2
#include<stdio.h>

#include<stdlib.h>
int max=199;
void main(){
int direction,rq[max],initial,i,headm=0,n,min,m,headb;
printf("\nEnter the No Request\n");
scanf("%d",&n);
printf("\nEnter the sequence\n");
for ( i = 0; i <n; i++)
scanf("%d",&rq[i]);
printf("\nEnter the initial\n");
scanf("%d",&initial);
printf("\nEnter head direction\n1:Left\n2:Right\n");
scanf("%d",&direction);
if(direction==1){
m=rq[0];
for(i=1;i<n;i++){
if(m<=rq[i])
m=rq[i];
}
headb=initial+m;
printf("\nTotal left HeadMovement %d ",headb);
}else{
min=rq[0];
for(i=1;i<n;i++){
if(min>=rq[i])
min=rq[i];
}
headm=max-initial+max-min;
printf("\nTotal right HeadMovement %d ",headm);
}
}